// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: messages.proto

package typedefs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RBCMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Op:
	//
	//	*RBCMessage_ProposeInst
	//	*RBCMessage_EchoInst
	//	*RBCMessage_ReadyInst
	Op            isRBCMessage_Op `protobuf_oneof:"op"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBCMessage) Reset() {
	*x = RBCMessage{}
	mi := &file_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCMessage) ProtoMessage() {}

func (x *RBCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCMessage.ProtoReflect.Descriptor instead.
func (*RBCMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *RBCMessage) GetOp() isRBCMessage_Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *RBCMessage) GetProposeInst() *RBCMessage_Propose {
	if x != nil {
		if x, ok := x.Op.(*RBCMessage_ProposeInst); ok {
			return x.ProposeInst
		}
	}
	return nil
}

func (x *RBCMessage) GetEchoInst() *RBCMessage_Echo {
	if x != nil {
		if x, ok := x.Op.(*RBCMessage_EchoInst); ok {
			return x.EchoInst
		}
	}
	return nil
}

func (x *RBCMessage) GetReadyInst() *RBCMessage_Ready {
	if x != nil {
		if x, ok := x.Op.(*RBCMessage_ReadyInst); ok {
			return x.ReadyInst
		}
	}
	return nil
}

type isRBCMessage_Op interface {
	isRBCMessage_Op()
}

type RBCMessage_ProposeInst struct {
	ProposeInst *RBCMessage_Propose `protobuf:"bytes,1,opt,name=propose_inst,json=proposeInst,proto3,oneof"`
}

type RBCMessage_EchoInst struct {
	EchoInst *RBCMessage_Echo `protobuf:"bytes,2,opt,name=echo_inst,json=echoInst,proto3,oneof"`
}

type RBCMessage_ReadyInst struct {
	ReadyInst *RBCMessage_Ready `protobuf:"bytes,3,opt,name=ready_inst,json=readyInst,proto3,oneof"`
}

func (*RBCMessage_ProposeInst) isRBCMessage_Op() {}

func (*RBCMessage_EchoInst) isRBCMessage_Op() {}

func (*RBCMessage_ReadyInst) isRBCMessage_Op() {}

type Packet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*Packet_RbcMessage
	Message       isPacket_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetMessage() isPacket_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Packet) GetRbcMessage() *RBCMessage {
	if x != nil {
		if x, ok := x.Message.(*Packet_RbcMessage); ok {
			return x.RbcMessage
		}
	}
	return nil
}

type isPacket_Message interface {
	isPacket_Message()
}

type Packet_RbcMessage struct {
	RbcMessage *RBCMessage `protobuf:"bytes,1,opt,name=rbcMessage,proto3,oneof"`
}

func (*Packet_RbcMessage) isPacket_Message() {}

type RBCMessage_Propose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBCMessage_Propose) Reset() {
	*x = RBCMessage_Propose{}
	mi := &file_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBCMessage_Propose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCMessage_Propose) ProtoMessage() {}

func (x *RBCMessage_Propose) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCMessage_Propose.ProtoReflect.Descriptor instead.
func (*RBCMessage_Propose) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RBCMessage_Propose) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type RBCMessage_Echo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EncodingShares [][]byte               `protobuf:"bytes,1,rep,name=encodingShares,proto3" json:"encodingShares,omitempty"`
	MessageHash    []byte                 `protobuf:"bytes,2,opt,name=messageHash,proto3" json:"messageHash,omitempty"`
	SharesIndices  []int64                `protobuf:"varint,3,rep,packed,name=sharesIndices,proto3" json:"sharesIndices,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RBCMessage_Echo) Reset() {
	*x = RBCMessage_Echo{}
	mi := &file_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBCMessage_Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCMessage_Echo) ProtoMessage() {}

func (x *RBCMessage_Echo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCMessage_Echo.ProtoReflect.Descriptor instead.
func (*RBCMessage_Echo) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RBCMessage_Echo) GetEncodingShares() [][]byte {
	if x != nil {
		return x.EncodingShares
	}
	return nil
}

func (x *RBCMessage_Echo) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

func (x *RBCMessage_Echo) GetSharesIndices() []int64 {
	if x != nil {
		return x.SharesIndices
	}
	return nil
}

type RBCMessage_Ready struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodingShare []byte                 `protobuf:"bytes,1,opt,name=encodingShare,proto3" json:"encodingShare,omitempty"`
	MessageHash   []byte                 `protobuf:"bytes,2,opt,name=messageHash,proto3" json:"messageHash,omitempty"`
	Index         int64                  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBCMessage_Ready) Reset() {
	*x = RBCMessage_Ready{}
	mi := &file_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBCMessage_Ready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCMessage_Ready) ProtoMessage() {}

func (x *RBCMessage_Ready) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCMessage_Ready.ProtoReflect.Descriptor instead.
func (*RBCMessage_Ready) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RBCMessage_Ready) GetEncodingShare() []byte {
	if x != nil {
		return x.EncodingShare
	}
	return nil
}

func (x *RBCMessage_Ready) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

func (x *RBCMessage_Ready) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_messages_proto protoreflect.FileDescriptor

const file_messages_proto_rawDesc = "" +
	"\n" +
	"\x0emessages.proto\x12\btypedefs\"\xd0\x03\n" +
	"\n" +
	"RBCMessage\x12A\n" +
	"\fpropose_inst\x18\x01 \x01(\v2\x1c.typedefs.RBCMessage.ProposeH\x00R\vproposeInst\x128\n" +
	"\techo_inst\x18\x02 \x01(\v2\x19.typedefs.RBCMessage.EchoH\x00R\bechoInst\x12;\n" +
	"\n" +
	"ready_inst\x18\x03 \x01(\v2\x1a.typedefs.RBCMessage.ReadyH\x00R\treadyInst\x1a#\n" +
	"\aPropose\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x1av\n" +
	"\x04Echo\x12&\n" +
	"\x0eencodingShares\x18\x01 \x03(\fR\x0eencodingShares\x12 \n" +
	"\vmessageHash\x18\x02 \x01(\fR\vmessageHash\x12$\n" +
	"\rsharesIndices\x18\x03 \x03(\x03R\rsharesIndices\x1ae\n" +
	"\x05Ready\x12$\n" +
	"\rencodingShare\x18\x01 \x01(\fR\rencodingShare\x12 \n" +
	"\vmessageHash\x18\x02 \x01(\fR\vmessageHash\x12\x14\n" +
	"\x05index\x18\x03 \x01(\x03R\x05indexB\x04\n" +
	"\x02op\"K\n" +
	"\x06Packet\x126\n" +
	"\n" +
	"rbcMessage\x18\x01 \x01(\v2\x14.typedefs.RBCMessageH\x00R\n" +
	"rbcMessageB\t\n" +
	"\amessageB\fZ\n" +
	"./typedefsb\x06proto3"

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData []byte
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)))
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_messages_proto_goTypes = []any{
	(*RBCMessage)(nil),         // 0: typedefs.RBCMessage
	(*Packet)(nil),             // 1: typedefs.Packet
	(*RBCMessage_Propose)(nil), // 2: typedefs.RBCMessage.Propose
	(*RBCMessage_Echo)(nil),    // 3: typedefs.RBCMessage.Echo
	(*RBCMessage_Ready)(nil),   // 4: typedefs.RBCMessage.Ready
}
var file_messages_proto_depIdxs = []int32{
	2, // 0: typedefs.RBCMessage.propose_inst:type_name -> typedefs.RBCMessage.Propose
	3, // 1: typedefs.RBCMessage.echo_inst:type_name -> typedefs.RBCMessage.Echo
	4, // 2: typedefs.RBCMessage.ready_inst:type_name -> typedefs.RBCMessage.Ready
	0, // 3: typedefs.Packet.rbcMessage:type_name -> typedefs.RBCMessage
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_messages_proto_msgTypes[0].OneofWrappers = []any{
		(*RBCMessage_ProposeInst)(nil),
		(*RBCMessage_EchoInst)(nil),
		(*RBCMessage_ReadyInst)(nil),
	}
	file_messages_proto_msgTypes[1].OneofWrappers = []any{
		(*Packet_RbcMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
